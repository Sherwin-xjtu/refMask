params {


    //Java options
	
	java_opt_samtofastq = "-Xms3000m"
    java_opt_mergebams = "-Xms6000m"
	java_opt_markdups = "-Xms4000m"
	java_opt_sort = "-Xms4000m"
	java_opt_fix = "-Xms500m"
	java_opt_baserecal = "-Xms4000m"
	java_opt_bqsrreport = "-Xms3000m"
 	java_opt_applybqsr = "-Xms6000m"
    java_opt_gatherbams = "-Xms8000m"
	java_opt_haplotype = "-Xmx4G"
    java_opt_mergevcfs = "-Xmx4G"
    java_opt_genomicsDBimport = "-Xmx4G"
    java_tmp_dir = "/czlab/xuwen/tmp"

    compression_level = 5
	
	//Reference files
  	fasta = "/czlab/xuwen/references/hg38/v0/Homo_sapiens_assembly38.fasta"
  	dbSNP_vcf = "/czlab/xuwen/references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf"
	known_indels_mills = "/czlab/xuwen/references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
	known_indels_dbSNP = "/czlab/xuwen/references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz"
	axiompoly_vcf =  "/czlab/xuwen/references/hg38/v0/Axiom_Exome_Plus.genotypes.all_populations.poly.hg38.vcf.gz"
	hapmap_vcf = "/czlab/xuwen/references/hg38/v0/hapmap_3.3.hg38.vcf.gz"
	omni_vcf = "/czlab/xuwen/references/hg38/v0/1000G_omni2.5.hg38.vcf.gz"
	onekg_vcf = "/czlab/xuwen/references/hg38/v0/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
	sequence_grouping = "sequence_grouping.txt"
	sequence_grouping_unmapped = "sequence_grouping_with_unmapped.txt"
	scattered_calling_interval = "/czlab/xuwen/gatk-test-data/intervals/hg38_wgs_scattered_calling_intervals.txt"


    //local or slurm 
    gatk = "/homes8/xuwen/software/gatk/gatk"
    bwa = "/homes8/xuwen/miniconda3/bin"
    picard = "/homes8/xuwen/software/picard/build/libs"

    //Docker images
    gatk_docker = "<gatk:4.1.8.0>"
    gotc_docker = "<genomes-in-the-cloud:2.3.1-1504795437>"
    gatk4110_docker = "<gatk:4.1.1.0>"
    gatk_joint_docker = "<gatk-nightly:2019-05-07-4.1.2.0-5-g53d015e4f-NIGHTLY-SNAPSHOT>"
    
    //Joint Genotyping options
	callset_name = "test"
	cohort = "test"
	unpadded_intervals_file = "/czlab/xuwen/references/hg38/v0/hg38.even.handcurated.20k.intervals"
	eval_interval_list = "/czlab/xuwen/references/hg38/v0/wgs_evaluation_regions.hg38.interval_list"
	snp_recalibration_tranche_values = ["100.0", "99.95", "99.9", "99.8", "99.6", "99.5", "99.4", "99.3", "99.0", "98.0", "97.0", "90.0" ]
	snp_recalibration_annotation_values =  ["QD", "MQRankSum", "ReadPosRankSum", "FS", "MQ", "SOR", "DP"]
	indel_recalibration_annotation_values =  ["FS", "ReadPosRankSum", "MQRankSum", "QD", "SOR", "DP"]
	indel_recalibration_tranche_values = ["100.0", "99.95", "99.9", "99.5", "99.0", "97.0", "96.0", "95.0", "94.0", "93.5", "93.0", "92.0", "91.0", "90.0"]

        
    }

profiles {

    standard {
        process.executor = 'local'
    }

    // High Performance Computing cluster with slurm
    // The pipeline must be launched from a node where the sbatch command is available. 
    hpc_slurm {
        process {

            // definition of the slurm executor. Run the pipeline in a node able to submit jobs to a HPC via sbatch
            
            // (optional) define the default executor:  export NXF_EXECUTOR=slurm
            // (optional) specify the max heap size: export NXF_OPTS="-Xms500M -Xmx2G" 

            // resources for default process execution
            cpus='1'
            memory = '1 GB'
            // time='1h'
            executor = 'slurm'
    

            // resources for execution of processes / modules with the label "bigcpus". This override the default ones.
            withLabel: 'bigcpus' {
                queue =  'defq'
                // queueSize = 100
                cpus = 8
                memory = '30 GB'
                time='100h'
            }

            withLabel: 'test_mem' {
                // executor = 'slurm'
                queue = 'defq'
                memory = 4.GB
                time='100h'
            }

            withLabel: 'normem' {  
                queue = 'defq'
                // memory = '12 GB'
                // cpus = 4
                // time='6h'
            }
        }
    }

    cluster {
        process.executor = 'sge'
        process.queue = 'long'
        process.memory = '10GB'
    }

    cloud {
        process.executor = 'cirrus'
        process.container = 'cbcrg/imagex'
        docker.enabled = true
    }
}


dag {
    overwrite = true
}

report {
    overwrite = true
}

trace {
    overwrite = true
}